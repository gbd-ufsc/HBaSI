/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package HbaseSchemaInference.view;

import HbaseSchemaInference.control.App;
import java.awt.Toolkit;
import java.awt.datatransfer.StringSelection;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JList;

/**
 *
 * @author eduardo
 */
public class MainView extends javax.swing.JFrame {

    private App app;
    private String[] schemas;

    public MainView() {
        initComponents();
    }

    public MainView(App main) {
        app = main;

        initComponents();
        getNamespaces();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        namespacesScroll = new javax.swing.JScrollPane();
        avaliableNamespaces = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        refreshNamespaces = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 24), new java.awt.Dimension(0, 24), new java.awt.Dimension(32767, 24));
        jSeparator1 = new javax.swing.JSeparator();
        refreshSchemes = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        schemasScroll = new javax.swing.JScrollPane();
        AvaliableSchemes = new javax.swing.JList<>();
        jLabel3 = new javax.swing.JLabel();
        namespaceLabel = new javax.swing.JLabel();
        newScheme = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        schemaArea = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        schemaLabel = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        exportScheme = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        copyScheme = new javax.swing.JButton();
        statusLabel = new javax.swing.JLabel();
        deleteScheme = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        avaliableNamespaces.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "testes" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        avaliableNamespaces.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        namespacesScroll.setViewportView(avaliableNamespaces);

        jLabel1.setText("Namespaces disponiveis:");

        refreshNamespaces.setText("Atualizar");
        refreshNamespaces.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                refreshNamespacesMouseReleased(evt);
            }
        });
        refreshNamespaces.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshNamespacesActionPerformed(evt);
            }
        });

        jSeparator1.setForeground(new java.awt.Color(0, 0, 0));
        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator1.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N

        refreshSchemes.setText("Atualizar");
        refreshSchemes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                refreshSchemesMouseReleased(evt);
            }
        });

        jSeparator2.setForeground(new java.awt.Color(0, 0, 0));
        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator2.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N

        jLabel2.setText("Esquemas:");

        AvaliableSchemes.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        schemasScroll.setViewportView(AvaliableSchemes);

        jLabel3.setText("Namespace: ");

        namespaceLabel.setText("N");

        newScheme.setText("Gerar Novo");
        newScheme.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                newSchemeMouseReleased(evt);
            }
        });
        newScheme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newSchemeActionPerformed(evt);
            }
        });

        schemaArea.setEditable(false);
        schemaArea.setColumns(20);
        schemaArea.setRows(5);
        jScrollPane1.setViewportView(schemaArea);

        jLabel4.setText("JSON Schema");

        schemaLabel.setText("N");

        jLabel5.setText("Esquema:");

        exportScheme.setText("Exportar JSON Schema");
        exportScheme.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                exportSchemeMouseReleased(evt);
            }
        });
        exportScheme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportSchemeActionPerformed(evt);
            }
        });

        jSeparator3.setForeground(new java.awt.Color(0, 0, 0));
        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator3.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N

        copyScheme.setText("Copiar JSON Schema");
        copyScheme.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                copySchemeMouseReleased(evt);
            }
        });
        copyScheme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copySchemeActionPerformed(evt);
            }
        });

        statusLabel.setText("Status:");

        deleteScheme.setText("Excluir");
        deleteScheme.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                deleteSchemeMouseReleased(evt);
            }
        });
        deleteScheme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteSchemeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(namespaceLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(81, 81, 81)
                                .addComponent(jLabel2)
                                .addGap(296, 296, 296)
                                .addComponent(jLabel4)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(namespacesScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(refreshNamespaces)
                                .addGap(38, 38, 38)))
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(statusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(refreshSchemes)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(deleteScheme)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(newScheme))
                                    .addComponent(schemasScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(copyScheme)
                                .addGap(26, 26, 26)
                                .addComponent(exportScheme)
                                .addGap(94, 94, 94))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(schemaLabel)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(jScrollPane1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22)))
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(156, 156, 156))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(namespacesScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(refreshNamespaces)
                        .addContainerGap(43, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(schemaLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(exportScheme)
                            .addComponent(copyScheme)))
                    .addComponent(jSeparator1)
                    .addComponent(jSeparator2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(namespaceLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(schemasScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(refreshSchemes)
                            .addComponent(newScheme)
                            .addComponent(deleteScheme))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(statusLabel)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void refreshNamespacesMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshNamespacesMouseReleased
        getNamespaces();
        statusLabel.setText("");
    }//GEN-LAST:event_refreshNamespacesMouseReleased

    private void refreshSchemesMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshSchemesMouseReleased
        if (refreshSchemes.isEnabled()) {
            selectNamespace();
            statusLabel.setText("");
        }
    }//GEN-LAST:event_refreshSchemesMouseReleased

    private void refreshNamespacesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshNamespacesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_refreshNamespacesActionPerformed

    private void newSchemeMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newSchemeMouseReleased
        if (newScheme.isEnabled()) {
            newScheme.setEnabled(false);
            statusLabel.setText("Iniciando a inferência");
            String namespace = namespaceLabel.getText();
            app.newSchema(namespace);
        }
    }//GEN-LAST:event_newSchemeMouseReleased

    private void newSchemeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newSchemeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newSchemeActionPerformed

    private void exportSchemeMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exportSchemeMouseReleased
        if (copyScheme.isEnabled()) {
            JFileChooser fc = new JFileChooser();
            File yourFolder = new java.io.File(".");
            fc.setCurrentDirectory(yourFolder); // start at application current directory
            fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            int returnVal = fc.showSaveDialog(this);

            if (returnVal == JFileChooser.APPROVE_OPTION) {
                yourFolder = fc.getSelectedFile();
            }
            BufferedWriter writer = null;
            try {
                writer = new BufferedWriter(new FileWriter(yourFolder.getAbsolutePath() + "/" + schemaLabel.getText() + ".json", true));
                writer.append(schemaArea.getText());
                writer.close();
            } catch (IOException ex) {
                Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    writer.close();
                } catch (IOException ex) {
                    Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_exportSchemeMouseReleased

    private void exportSchemeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportSchemeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_exportSchemeActionPerformed

    private void copySchemeMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_copySchemeMouseReleased
        if (copyScheme.isEnabled()) {
            Toolkit.getDefaultToolkit()
                    .getSystemClipboard()
                    .setContents(
                            new StringSelection(schemaArea.getText()),
                            null
                    );
        }
    }//GEN-LAST:event_copySchemeMouseReleased

    private void copySchemeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copySchemeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_copySchemeActionPerformed

    private void deleteSchemeMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteSchemeMouseReleased
        if (deleteScheme.isEnabled()) {
            if (AvaliableSchemes.getSelectedIndex() >= 0) {
            String selected = schemas[AvaliableSchemes.getSelectedIndex()];
            app.deleteScheme(selected);
            selectNamespace();
            statusLabel.setText("");
        }else{
            statusLabel.setText("selecione um esquema para excluir");
            }
            
        } 
    }//GEN-LAST:event_deleteSchemeMouseReleased

    private void deleteSchemeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteSchemeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_deleteSchemeActionPerformed

    public void updateStatus(String text) {
        statusLabel.setText(text);
    }

    public void newSchema(Date date, long totalTime) {
        
        String dateF = String.format("%02d:%02d:%02d",
                        TimeUnit.MILLISECONDS.toHours(totalTime),
                        TimeUnit.MILLISECONDS.toMinutes(totalTime),
                        TimeUnit.MILLISECONDS.toSeconds(totalTime));
        updateStatus("Tempo de inferência: "+dateF);
        selectNamespace();
        AvaliableSchemes.setSelectedValue(date.toString(), true);
        selectScheme();
        newScheme.setEnabled(true);
    }

    private void selectNamespace() {
        if (avaliableNamespaces.getSelectedIndex() >= 0) {
            String selected = avaliableNamespaces.getSelectedValue();
            namespaceLabel.setText(selected);
            getSchemesList(selected);
        }
    }

    private void selectScheme() {
        if (AvaliableSchemes.getSelectedIndex() >= 0) {
            String selected = schemas[AvaliableSchemes.getSelectedIndex()];
            schemaLabel.setText(namespaceLabel.getText() + " - " + AvaliableSchemes.getSelectedValue());
            getSchema(selected);
        }
    }

    private void getSchema(String namespace) {
        String scheme = app.getSchema(namespace);
        schemaArea.setText(scheme);
        exportScheme.setEnabled(true);
        copyScheme.setEnabled(true);

    }

    private void getSchemesList(String namespace) {
        String[] namespaces = app.getSchemes(namespace);

        schemas = Arrays.copyOfRange(namespaces, 0, namespaces.length);
        for (int i = 0; i < namespaces.length; i++) {
            String[] split = namespaces[i].split("_");
            long time = Long.parseLong(split[split.length - 1]);
            Date date = new Date(time);
            namespaces[i] = date.toString();
        }
        AvaliableSchemes = new JList(namespaces);
        AvaliableSchemes.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                selectScheme();
            }
        });
        AvaliableSchemes.setSelectedIndex(-1);
        schemasScroll.setViewportView(AvaliableSchemes);
        refreshSchemes.setEnabled(true);
        deleteScheme.setEnabled(true);
        newScheme.setEnabled(true);
        clearSchemeView();
    }

    private void getNamespaces() {
        String[] namespaces = app.getNamespaces();
        avaliableNamespaces = new JList(namespaces);
        avaliableNamespaces.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                selectNamespace();
            }
        });
        avaliableNamespaces.setSelectedIndex(-1);
        namespacesScroll.setViewportView(avaliableNamespaces);
        clearSchemesList();

    }

    private void clearSchemeView() {
        schemaArea.setText("");
        schemaLabel.setText("");
        exportScheme.setEnabled(false);
        copyScheme.setEnabled(false);
    }

    private void clearSchemesList() {
        AvaliableSchemes = new JList();
        AvaliableSchemes.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                selectScheme();
            }
        });
        AvaliableSchemes.setSelectedIndex(-1);
        schemasScroll.setViewportView(AvaliableSchemes);
        namespaceLabel.setText("");
        refreshSchemes.setEnabled(false);
        deleteScheme.setEnabled(false);
        newScheme.setEnabled(false);
        statusLabel.setText("");
        schemas = new String[0];
        clearSchemeView();

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> AvaliableSchemes;
    private javax.swing.JList<String> avaliableNamespaces;
    private javax.swing.JButton copyScheme;
    private javax.swing.JButton deleteScheme;
    private javax.swing.JButton exportScheme;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JLabel namespaceLabel;
    private javax.swing.JScrollPane namespacesScroll;
    private javax.swing.JButton newScheme;
    private javax.swing.JButton refreshNamespaces;
    private javax.swing.JButton refreshSchemes;
    private javax.swing.JTextArea schemaArea;
    private javax.swing.JLabel schemaLabel;
    private javax.swing.JScrollPane schemasScroll;
    private javax.swing.JLabel statusLabel;
    // End of variables declaration//GEN-END:variables
}
